android {

    buildFeatures {
        buildConfig = true
    }

    dataBinding {
        enabled true
    }

    buildFeatures {
        viewBinding true
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }


    defaultConfig {
        multiDexEnabled true
    }


    def fieldCreator = new FieldCreator()
    flavorDimensions 'env'
    fieldCreator
            .addString("string", "string")
            .addInteger("int1", 1)
            .addBoolean("boolean1", true)
            .addFloat("float1", 1f)
            .addChar("char1", 'c')
            .addResource("resource1", "resorce")
            .addStringList("string1", "strList", "sdfasd")
            .addIntegerList("in1t", 1, 1, 2, 3, 4, 23, 42, 34)
            .addBooleanList("boolean1", true, false, false, false, true)
            .addFloatList("float1123", 1.0f, 2.0f)
            .addCharList("char11", 'c', 'c')

    productFlavors {
        dev {
            dimension 'env'
            fieldCreator
                    .addIntegerList("in1t", 1, 1, 2, 3, 4, 23, 42, 34)
                    .addBooleanList("boolean1", true, false, false, false, true)
                    .addFloatList("float1123", 1.0f, 2.0f)
                    .addCharList("char11", 'F', 'F')

        }
        preprod {
            dimension 'env'
        }
        prod {
            dimension 'env'
        }
    }

    applicationVariants.all { variant ->
        fieldCreator.create(variant)
    }

}

class FieldCreator {
    private final HashMap<String, String> stringHashMap = new HashMap<>()
    private final HashMap<String, Integer> intHashMap = new HashMap<>()
    private final HashMap<String, Boolean> booleanHashMap = new HashMap<>()
    private final HashMap<String, Float> floatHashMap = new HashMap<>()
    private final HashMap<String, Character> charHashMap = new HashMap<>()
    private final HashMap<String, String> resourceHashMap = new HashMap<>()
    private final HashMap<String, ArrayList<String>> stringListHashMap = new HashMap<>()
    private final HashMap<String, ArrayList<Integer>> intListHashMap = new HashMap<>()
    private final HashMap<String, ArrayList<Boolean>> booleanListHashMap = new HashMap<>()
    private final HashMap<String, ArrayList<Float>> floatListHashMap = new HashMap<>()
    private final HashMap<String, ArrayList<Character>> charListHashMap = new HashMap<>()

    FieldCreator addString(String key, String value) {
        stringHashMap.remove(key)
        stringHashMap.put(key, value)
        return this
    }

    FieldCreator addInteger(String key, int value) {
        intHashMap.remove(key)
        intHashMap.put(key, value)
        return this
    }

    FieldCreator addBoolean(String key, boolean value) {
        booleanHashMap.remove(key)
        booleanHashMap.put(key, value)
        return this
    }

    FieldCreator addFloat(String key, float value) {
        floatHashMap.remove(key)
        floatHashMap.put(key, value)
        return this
    }

    FieldCreator addChar(String key, String value) {
        charHashMap.remove(key)
        charHashMap.put(key, Character.valueOf(value.charAt(0)))
        return this
    }

    FieldCreator addResource(String key, String value) {
        resourceHashMap.remove(key)
        resourceHashMap.put(key, value)
        return this
    }

    FieldCreator addStringList(String key, String... value) {
        def list = new ArrayList<String>()
        list.addAll(value)
        stringListHashMap.remove(key)
        stringListHashMap.put(key, list)
        return this
    }

    FieldCreator addIntegerList(String key, int ... value) {
        def list = new ArrayList<Integer>()
        list.addAll(value)
        intListHashMap.remove(key)
        intListHashMap.put(key, list)
        return this
    }

    FieldCreator addBooleanList(String key, boolean ... value) {
        def list = new ArrayList<Boolean>()
        list.addAll(value)
        booleanListHashMap.remove(key)
        booleanListHashMap.put(key, list)
        return this
    }

    FieldCreator addFloatList(String key, float ... value) {
        def list = new ArrayList<Float>()
        list.addAll(value)
        floatListHashMap.remove(key)
        floatListHashMap.put(key, list)
        return this
    }

    FieldCreator addCharList(String key, String... value) {
        def list = new ArrayList<Character>()
        list.addAll(value)
        charListHashMap.remove(key)
        charListHashMap.put(key, list)
        return this
    }


    void create(Object variant) {
        intHashMap.each { key, value ->
            variant.buildConfigField('int', key, String.valueOf(value))
        }
        stringHashMap.each { key, value ->
            variant.buildConfigField("String", key, '"' + String.valueOf(value) + '"')
        }
        booleanHashMap.each { key, value ->
            variant.buildConfigField("boolean", key, String.valueOf(value))
        }
        floatHashMap.each { key, value ->
            variant.buildConfigField("float", key, String.valueOf(value + "f"))
        }
        charHashMap.each { key, value ->
            variant.buildConfigField("char", key, "'" + value + "'")
        }
        resourceHashMap.each { key, value ->
            variant.resValue "string", key, value
        }
        stringListHashMap.each { key, value ->
            String result = "{"
            value.each { item ->
                result += String.valueOf('"' + item + '"') + ","
            }
            result = result.substring(0, result.length() - 1)
            result += "}"

            variant.buildConfigField "String[]", key, result
        }
        intListHashMap.each { key, value ->
            String result = "{"
            value.each { item ->
                result += String.valueOf(item) + ","
            }
            result = result.substring(0, result.length() - 1)
            result += "}"

            variant.buildConfigField "int[]", key, result
        }
        booleanListHashMap.each { key, value ->
            String result = "{"
            value.each { item ->
                result += String.valueOf(item) + ','
            }
            result = result.substring(0, result.length() - 1)
            result += "}"
            variant.buildConfigField "boolean[]", key, result
        }
        floatListHashMap.each { key, value ->
            String result = "{"
            value.each { item ->
                result += String.valueOf(item + "f") + ','
            }
            result = result.substring(0, result.length() - 1)
            result += "}"
            variant.buildConfigField "float[]", key, result
        }
        charListHashMap.each { key, value ->
            String result = "{"
            value.each { item ->
                result += "'" + item + "'" + ','
            }
            result = result.substring(0, result.length() - 1)
            result += "}"
            variant.buildConfigField "char[]", key, result
        }
    }
}

